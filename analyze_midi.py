#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AI Music Composer - MIDI Analyzer
Script to analyze MIDI files generated by the AI Music Composer
"""

import sys
import os
import logging
import mido

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def analyze_midi_file(midi_file_path):
    """Analyze a MIDI file and display its structure"""
    if not os.path.exists(midi_file_path):
        print(f"Error: MIDI file '{midi_file_path}' not found.")
        return False
    
    try:
        # Load the MIDI file
        print(f"\nAnalyzing MIDI file: {midi_file_path}\n")
        midi_file = mido.MidiFile(midi_file_path)
        
        # Display basic information
        print(f"Format: {midi_file.type}")
        print(f"Tracks: {len(midi_file.tracks)}")
        print(f"Ticks per beat: {midi_file.ticks_per_beat}")
        
        # Calculate duration
        duration_seconds = midi_file.length
        minutes = int(duration_seconds // 60)
        seconds = int(duration_seconds % 60)
        print(f"Duration: {minutes}m {seconds}s ({duration_seconds:.2f} seconds)")
        
        # Display information about each track
        print("\n=== Track Information ===")
        for i, track in enumerate(midi_file.tracks):
            track_name = None
            instrument_name = None
            note_count = 0
            
            # Extract track name and instrument
            for msg in track:
                if msg.type == 'track_name':
                    track_name = msg.name
                elif msg.type == 'program_change':
                    instrument_name = f"Program {msg.program}"
                elif msg.type == 'note_on' and msg.velocity > 0:
                    note_count += 1
            
            print(f"\nTrack {i+1}")
            print(f"  Name: {track_name or 'Unknown'}")
            print(f"  Instrument: {instrument_name or 'Unknown'}")
            print(f"  Notes: {note_count}")
            
            # Show the first 10 musical events (notes, chords)
            print("  Preview of musical events:")
            event_count = 0
            for msg in track:
                if event_count >= 10:
                    break
                
                if msg.type == 'note_on' and msg.velocity > 0:
                    note_name = get_note_name(msg.note)
                    print(f"    Note: {note_name} (Velocity: {msg.velocity})")
                    event_count += 1
        
        return True
    
    except Exception as e:
        logger.error(f"Error analyzing MIDI file: {e}")
        import traceback
        traceback.print_exc()
        return False

def get_note_name(midi_note):
    """Convert MIDI note number to note name (e.g., 60 -> C4)"""
    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
    octave = midi_note // 12 - 1
    note = notes[midi_note % 12]
    return f"{note}{octave}"

def main():
    """Main function to analyze a MIDI file"""
    try:
        # Get the MIDI file path from arguments or use default
        if len(sys.argv) > 1:
            midi_file_path = sys.argv[1]
        else:
            # Check if we have generated files
            if os.path.exists("ai_composition.mid"):
                midi_file_path = "ai_composition.mid"
            elif os.path.exists("output.mid"):
                midi_file_path = "output.mid"
            else:
                print("No MIDI file specified and no default files found.")
                print("Usage: python analyze_midi.py [midi_file_path]")
                return
        
        print(f"=== AI Music Composer - MIDI Analyzer ===")
        analyze_midi_file(midi_file_path)
        
    except Exception as e:
        logger.error(f"Application error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()